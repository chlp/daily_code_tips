[
  {
    "title": "Проектирование при конструировании",
    "points": [
      "Главным Техническим Императивом Разработки ПО является управление сложностью. Управлять сложностью будет гораздо легче, если при проектировании вы будете стремиться к простоте.",
      "Есть два общих способа достижения простоты: минимизация объема существенной сложности, с которой приходится иметь дело в любой конкретный момент времени, и подавление необязательного роста несущественной сложности.",
      "Проектирование — эвристический процесс. Слепое следование какой-либо единственной методологии подавляет творческое мышление и снижает качество ваших программ.",
      "Оптимальный процесс проектирования итеративен; чем больше вариантов проектирования вы попробуете, тем удачнее будет ваш окончательный проект.",
      "Одной из самых полезных концепций проектирования является сокрытие информации. Вопрос «Что мне скрыть?» устраняет много сложных проблем проектирования."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 5"
  },
  {
    "title": "Абстракция",
    "points": [
      "Имеет ли класс главную цель?",
      "Удачное ли имя присвоено классу? Описывает ли оно главную цель класса?",
      "Формирует ли интерфейс класса согласованную абстракцию?",
      "Ясно ли интерфейс описывает использование класса?",
      "Достаточно ли абстрактен интерфейс, чтобы вы могли не думать о реализации класса? Можно ли рассматривать класс как «черный ящик»?",
      "Достаточно ли полон набор сервисов класса, чтобы другие классы могли не обращаться к его внутренним данным?",
      "Исключена ли из класса нерелевантная информация?",
      "Обдумали ли вы разделение класса на классы-компоненты? Разделен ли он на максимально возможное число компонентов?",
      "Сохраняется ли целостность интерфейса при изменении класса?"
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 6"
  },
  {
    "title": "Инкапсуляция",
    "points": [
      "Сделаны ли члены класса минимально доступными?",
      "Избегает ли класс предоставления доступа к своим данным-членам?",
      "Скрывает ли класс детали реализации от других классов в максимально",
      "возможной степени, допускаемой языком программирования?",
      "Избегает ли класс предположений о своих клиентах, в том числе о производных классах?",
      "Независим ли класс от других классов? Слабо ли он связан?"
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 6"
  },
  {
    "title": "Наследование",
    "points": [
      "Используется ли наследование только для моделирования отношения «является», т.е. придерживаются ли производные классы принципа подстановки Лисков?",
      "Описана ли в документации класса стратегия наследования?",
      "Избегают ли производные классы «переопределения» непереопределяемых методов?",
      "Перемещены ли общие интерфейсы, данные и формы поведения как можно ближе к корню дерева наследования?",
      "Не слишком ли много уровней включают иерархии наследования?",
      "Все ли данные — члены базового класса сделаны закрытыми, а не защищенными?"
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 6"
  },
  {
    "title": "Инициализация переменных",
    "points": [
      "В каждом ли методе проверяется корректность входных параметров?",
      "Переменные объявляются около места их использования в первый раз?",
      "Инициализировали ли вы переменные при их объявлении, если такое возможно?",
      "Если переменные невозможно объявить и инициализировать одновременно, вы инициализировали их около места использования в первый раз?",
      "Правильно ли инициализируются счетчики и аккумуляторы? Выполняется ли их повторная инициализация, если она необходима?",
      "Осуществляется ли правильная повторная инициализация переменных в коде, который выполняется более одного раза?",
      "Код компилируется без предупреждений? (И задали ли вы самый строгий уровень диагностики?)",
      "Если язык поддерживает неявные объявления переменных, постарались ли вы предотвратить возможные проблемы?"
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 10"
  },
  {
    "title": "Общие вопросы использования данных",
    "points": [
      "Все ли переменные имеют как можно меньшую область видимости?",
      "Являются ли обращения к переменным максимально сгруппированными как в плане интервала между обращениями, так и в плане общего времени жизни?",
      "Соответствуют ли управляющие структуры типам данных?",
      "Все ли объявленные переменные используются?",
      "Все ли переменные связываются в подходящее время, т. е. соблюдаете ли вы разумный баланс между гибкостью позднего связывания и соответствующей ему повышенной сложностью?",
      "Каждая ли переменная имеет одну и только одну цель?",
      "Не имеют ли какие-нибудь переменные скрытого смысла?"
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 10"
  },
  {
    "title": "Отладка",
    "points": [
      "Прежде чем приступать к исправлению программы, поймите суть проблемы. Случайные предположения о причинах ошибок и случайные исправления только ухудшат программу.",
      "Первый пункт в руководстве Дьявола по отладке - это «Поиск дефектов, основанный на гадании»; второй - «Тщательный анализ проблемы — пустая трата времени»."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 23"
  },
  {
    "title": "Цитата",
    "points": [
      "Всегда пишите код так, будто сопровождать его будет склонный к насилию психопат, который знает, где вы живете."
    ],
    "link": "Martin Golding"
  },
  {
    "title": "Цитата",
    "points": [
      "Есть два способа создания дизайна программы. Один из них, это сделать его настолько простым, что в нем, очевидно, не будет недостатков. Другой способ — сделать его настолько запутанным, что в нем не будет очевидных недостатков."
    ],
    "link": "C.A. R. Hoare"
  },
  {
    "title": "Цитата",
    "points": [
      "Никакой код не может быть быстрее, чем отсутствие кода."
    ],
    "link": "Taligent's Guide to Designing Programs"
  },
  {
    "title": "Цитата",
    "points": [
      "Все должно быть сделано так просто, как это возможно. Но не проще."
    ],
    "link": "A. Einstein"
  },
  {
    "title": "Цитата",
    "points": [
      "Отлаживать код вдвое сложнее, чем писать. Поэтому, если при написании программы вы используете весь свой интеллект, вы по определению недостаточно умны, чтобы ее отладить."
    ],
    "link": "Брайан Керниган (Brian W. Kernighan)"
  },
  {
    "title": "Цитата",
    "points": [
      "Правила оптимизации Джексона: Правило 1. Не делайте этого. Правило 2 (только для экспертов). Не делайте этого пока — до тех пор, пока вы не получите совершенно ясное неоптимизированное решение."
    ],
    "link": "М. А. Джексон"
  },
  {
    "title": "Управление конструированием, Поощрение хорошего кодирования",
    "points": [
      "Вообще внедрение строгого набора технических стандартов с позиций менеджера — не очень хорошая идея. Программисты склонны рассматривать менеджеров как низшую ступень технической эволюции, где-то между одноклеточными организмами и мамонтами, вымершими в ледниковый период. Поэтому, если внедрение программных стандартов необходимо, программисты должны в этом участвовать."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 28"
  },
  {
    "title": "Цитата",
    "points": [
      "Любой дурак может написать код, понятный компьютеру. Хорошие программисты пишут код, понятный людям."
    ],
    "link": "Мартин Фаулер"
  },
  {
    "title": "Цитата",
    "points": [
      "Любой дурак может защищать свои ошибки, почти каждый дурак это и делает."
    ],
    "link": "Мартин Фаулер"
  },
  {
    "title": "Форматирование и стиль",
    "points": [
      "Главная цель визуального форматирования — это подчеркивание логической структуры кода. В критерии оценки достижения этой цели входят аккуратность, единообразие, удобство чтения и сопровождения кода.",
      "Критерий хорошего внешнего вида имеет вторичное, далеко не основное зна  чение. Однако если другие критерии соблюдены, а лежащий в основе код на  писан хорошо, то форматирование будет выглядеть привлекательно.",
      "Структурирование кода само по себе имеет большое значение. Конкретные соглашения менее важны, чем сам факт, что вы последовательно применяете определенные соглашения. Договоренности по форматированию, соблюдае  мые лишь от случая к случаю, могут сильно ухудшить читаемость кода.",
      "Многие аспекты форматирования сродни религиозным вопросам. Пытайтесь разделять объективные и субъективные предпочтения. Используйте явные кри  терии для обоснования вашей точки зрения при обсуждении стилевых пред  почтений."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 31"
  },
  {
    "title": "Самодокументирующийся код",
    "points": [
      "Точно ли имя каждого метода описывает выполняемые в нем действия?",
      "Выполняет ли каждый метод одну и только одну хорошо определенную задачу?",
      "Все ли части метода, которые целесообразно поместить в отдельные методы, сделаны отдельными методами?",
      "Очевиден ли и ясен ли интерфейс каждого метода?"
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 32"
  },
  {
    "title": "Цитата",
    "points": [
      "На первые 90% кода приходятся первые 90% времени разработки. На оставшиеся 10% кода приходятся другие 90% времени разработки."
    ],
    "link": "Том Каргилл"
  },
  {
    "title": "Личность",
    "points": [
      "Спешка - это дополнительные, ненужные усилия. Она указывает на активность, но не на выполнение работы. Движение нетрудно спутать с прогрессом, а занятость с продуктивностью. Главную роль в эффективном программировании играет мышление, а размышляющие люди обычно не кажутся занятыми."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 33"
  },
  {
    "title": "Личность",
    "points": [
      "Обучаясь делать что-то, сразу учитесь делать это правильно. В первый раз вы активно обдумываете свои действия и все еще можете с легкостью изменить свой подход. Выполнив что-то несколько раз, вы начинаете уделять меньше внимания своим действиям, и «сила привычки» берет свое. Проверяйте, что вы приобретаете именно те привычки, какие хотите."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 33"
  },
  {
    "title": "Основы мастерства",
    "points": [
      "Наиболее страстно люди спорят о самых небольших различиях соглашений. Соглашения наиболее полезны, когда освобождают вас от принятия и защиты несущественных решений, и менее ценны, если налагают ограничения в более важных областях."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 34"
  },
  {
    "title": "Основы мастерства",
    "points": [
      "Функциональное именование переменных, отвечающее на вопрос «что?» уровня проблемы, а не «как?» уровня реализации, повышает уровень абстракции. Если вы говорите: «Я выталкиваю элемент из стека, получая данные о самом последнем сотруднике», — абстракция может избавить вас от выполнения умственного этапа «Я выталкиваю элемент из стека». Вы просто говорите: «Я получаю данные о самом последнем сотруднике»."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 34"
  },
  {
    "title": "Основы мастерства",
    "points": [
      "Привычки влияют на всю вашу работу, и вы не можете изменить их, просто захотев этого, поэтому убедитесь, что используемые вами подходы, став привычками, вас устроят. Профессиональные программисты пишут удобочитаемый код, и точка."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 34"
  },
  {
    "title": "Основы мастерства",
    "points": [
      "Программируйте так, чтобы ошибки было трудно не заметить."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 34"
  },
  {
    "title": "Основы мастерства",
    "points": [
      "Религия проявляется в разработке ПО по-разному: как догматичное следование единственной методике проектирования, как непоколебимая убежденность в превосходстве отдельного стиля форматирования или комментирования или как рьяный отказ от глобальных данных. Как бы то ни было, это всегда неуместно."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 34"
  },
  {
    "title": "Основы мастерства",
    "points": [
      "При неадекватном использовании конвенция программирования может оказаться лекарством, причиняющим больше вреда, чем болезнь; при грамотном — конвенция добавляет ценную структуру в среду разработки, помогает управлять сложностью и облегчает общение.",
      "Программирование в терминах проблемы, а не решения помогает управлять сложностью."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 34"
  },
  {
    "title": "Совершенный код",
    "points": [
      "Все ошибки, которые вы делаете сейчас, люди уже сделали до вас. И если вы не хотите стать мальчиком для битья, то предпочтете читать их книги, чтобы не повторять их ошибки и не изобретать велосипед."
    ],
    "link": "Стив Макконнелл, Совершенный код, Глава 35"
  }
]
